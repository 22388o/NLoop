{
  "openapi": "3.0.2",
  "info": {
    "title": "NLoop Server OpenAPI definition",
    "description": "Lightning Channel Manager. It will maintain the channel balance by performing submarine swap against Boltz server.\n",
    "contact": {
      "name": "Joe Miyamoto",
      "url": "https://twitter.com/joemphilips",
      "email": "joemphilips@gmail.com"
    },
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://api.server.test/v1"
    }
  ],
  "paths": {
    "/v1/version": {
      "get": {
        "tags": [
          "general"
        ],
        "operationId": "version",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/info": {
      "get": {
        "tags": [
          "general"
        ],
        "operationId": "info",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/swaps/{id}": {
      "get": {
        "tags": [
          "swap"
        ],
        "description": "Get the list of ongoing swaps.\n",
        "operationId": "swaps",
        "parameters": [
          {
            "$ref": "#/components/schemas/swapId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSwapResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/swaps/history": {
      "get": {
        "tags": [
          "swap"
        ],
        "description": "Get the full history of swaps.\n",
        "operationId": "history",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSwapHistoryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/swaps/ongoing": {
      "get": {
        "tags": [
          "swap"
        ],
        "description": "Get the list of ongoing swaps.\n",
        "operationId": "ongoing",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOngoingSwapResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/loop/out": {
      "post": {
        "tags": [
          "loop"
        ],
        "operationId": "out",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoopOutRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoopOutResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "error message",
                      "minItems": 1,
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Cookie": []
          }
        ]
      }
    },
    "/v1/loop/in": {
      "post": {
        "tags": [
          "loop"
        ],
        "operationId": "in",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoopInRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoopInResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "error message",
                      "minItems": 1,
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/loop/rule": {
      "post": {
        "tags": [
          "loop",
          "autoloop"
        ],
        "operationId": "rule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetRuleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "error message",
                      "minItems": 1,
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "cryptoCode": {
        "type": "string",
        "description": "Symbol name for the currency.",
        "enum": [
          "BTC",
          "LTC"
        ]
      },
      "pairId": {
        "type": "string",
        "description": "Pair of cryptoCode",
        "example": [
          "BTC/LTC",
          "BTC/BTC"
        ]
      },
      "PubKey": {
        "type": "string",
        "description": "Bitcoin public key in 33 bytes length",
        "format": "binary",
        "maxLength": 33,
        "minLength": 33,
        "example": "03afbba930dc74d6412b71c31f72bfb8d4615121174dd4290cbbf83960961ba9ab"
      },
      "P2PKH": {
        "type": "string",
        "pattern": "^[1][a-km-zA-HJ-NP-Z1-9]{25,34}$",
        "example": "1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2"
      },
      "BitcoinAddressNonMalleable": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/P2WSH"
          },
          {
            "$ref": "#/components/schemas/P2WPKH"
          }
        ]
      },
      "P2SH": {
        "type": "string",
        "pattern": "^[3][a-km-zA-HJ-NP-Z1-9]{25,34}$",
        "example": "3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy"
      },
      "P2WPKH": {
        "type": "string",
        "pattern": "^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25}$",
        "example": "bc1qcw9l54jre2wc4uju222wz8su6am2fs3vufsc8c"
      },
      "P2WSH": {
        "type": "string",
        "pattern": "^(bc1|[13])[a-zA-HJ-NP-Z0-9]{39}$",
        "example": "bc1q2y7lfmmm7xhv2dpf0n0mx6w26zspmvszm3hvkc4yn785xp8dvs5shejlc5"
      },
      "ShortChannelId": {
        "type": "string",
        "description": "See bolt 07",
        "pattern": "(\\d{3})x(\\d{3})x(\\d{2})",
        "example": "140x10x1"
      },
      "swapId": {
        "type": "string"
      },
      "LoopOutRequest": {
        "type": "object",
        "required": [
          "amount"
        ],
        "properties": {
          "channel_id": {
            "type": "array",
            "description": "< ShortChannelId for the one you want to get inbound liquidity. default is the one it has least.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ShortChannelId"
            }
          },
          "pair_id": {
            "description": "< currency pair to perform the swap. Default is BTC/BTC.",
            "nullable": true,
            "$ref": "#/components/schemas/pairId"
          },
          "address": {
            "nullable": true,
            "$ref": "#/components/schemas/BitcoinAddressNonMalleable"
          },
          "amount": {
            "type": "integer",
            "description": "< amount in satoshi.",
            "format": "int64"
          },
          "conf_target": {
            "type": "integer",
            "description": "< The number of confirmation before we make an off-chain offer. a.k.a. `htlc_confirmations` on lightning loop.",
            "default": "0",
            "nullable": true
          },
          "label": {
            "type": "string",
            "description": "< Additional label for this request.",
            "nullable": true
          },
          "max_swap_routing_fee": {
            "type": "integer",
            "description": "< Maximum off-chain fee in sat that may be paied for swap payment to the server. This limit is applied during path finding.",
            "format": "int64",
            "nullable": true
          },
          "max_prepay_routing_fee": {
            "type": "integer",
            "description": "< Maximum off-chain fee in sat that may be paid for the prepay to the server. This limit is applied during path finding.",
            "format": "int64",
            "nullable": true
          },
          "max_swap_fee": {
            "type": "integer",
            "description": "< Maximum we are willing to pay the server for the swap. This value is not disclosed in the swap initiation call, but if the server asks for a higher fee, we abort the swap.",
            "format": "int64",
            "nullable": true
          },
          "max_prepay_amount": {
            "type": "integer",
            "description": "< Maximum amount of the (loop-out) swap fee that may be charged as a prepayment",
            "format": "int64",
            "nullable": true
          },
          "max_miner_fee": {
            "type": "integer",
            "description": "< Maximum on-chain fees that we are willing to spend. If we want to sweep the on-chain htlc and the fee estimate turns out higher than this value, we cancel the swap. If the fee estimate is lower, we publish the sweep tx. If the sweep tx is not confirmed, we are forced to ratchet up fees until it is swept. Possibly even exceeding max_miner_fee if we get close to the HTLC timeout. Because the initial publication revealed the preimage, we have no other choice. The server may already have pulled the off-chain HTLC. Only when the fee becomes higher than the swap amount, we can wait for fees to come down and hope -- if we are past the timeout -- that the server is not publishing the revocation.",
            "format": "int64",
            "nullable": true
          },
          "sweep_conf_target": {
            "type": "integer",
            "description": "< Confimation target for sweeping the HTLC (a.k.a. swaptx, lockuptx)",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "LoopInRequest": {
        "type": "object",
        "required": [
          "amount"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "description": "< amount in satoshi.",
            "format": "int64"
          },
          "channel_id": {
            "description": "< currency pair to perform the swap. Default is BTC/BTC.",
            "nullable": true,
            "$ref": "#/components/schemas/ShortChannelId"
          },
          "pair_id": {
            "description": "< counterparty's cryptoCode to swap against. default is the same cryptocurrency with the one you pay.",
            "nullable": true,
            "$ref": "#/components/schemas/pairId"
          },
          "label": {
            "type": "string",
            "description": "< Additional label for this request.",
            "nullable": true
          },
          "max_miner_fee": {
            "type": "integer",
            "description": "< Maximum on-chain fees that we are willing to spend. If we want to publish the on-chain htlc and the fee estimate turns out higher than this value, we cancel the swap.",
            "format": "int64",
            "nullable": true
          },
          "max_swap_fee": {
            "type": "integer",
            "description": "< Maximum we are willing to pay the server for the swap. This value is not disclosed in the swap initiation call, but if the server asks for a higher fee, we abort the swap.",
            "format": "int64",
            "nullable": true
          },
          "htlc_conf_target": {
            "type": "integer",
            "description": "< Confimation target for sweeping the HTLC (a.k.a. swaptx, lockuptx)",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "GetInfoResponse": {
        "type": "object",
        "required": [
          "version",
          "supported_coins"
        ],
        "properties": {
          "version": {
            "type": "string"
          },
          "supported_coins": {
            "type": "object",
            "properties": {
              "on_chain": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/cryptoCode"
                }
              },
              "off_chain": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/cryptoCode"
                }
              }
            }
          }
        }
      },
      "GetSwapResponse": {
        "type": "object"
      },
      "ShortSwapSummary": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "SuccessfullyFinished",
              "FinishedByError",
              "FinishedByRefund",
              "OnGoing"
            ]
          },
          "error_msg": {
            "type": "string",
            "nullable": true
          },
          "refund_txid": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "GetSwapHistoryResponse": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/ShortSwapSummary"
        }
      },
      "GetOngoingSwapResponse": {
        "type": "array",
        "description": "list of swap",
        "items": {
          "type": "object"
        }
      },
      "LoopOutResponse": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Swap identifier to track status.\n"
          },
          "address": {
            "description": "< An address to which counterparty has paid. Must be the same with the one in the request unless null.",
            "$ref": "#/components/schemas/BitcoinAddressNonMalleable"
          },
          "claim_tx_id": {
            "description": "< An txid by which they have paid to us. It is populated only when its 0-conf.",
            "nullable": true
          }
        }
      },
      "LoopInResponse": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Swap identifier to track status.\n"
          },
          "address": {
            "description": "The address of the on-chain HTLC\n",
            "$ref": "#/components/schemas/P2WSH"
          }
        }
      },
      "SetRuleRequest": {
        "type": "object",
        "properties": {
          "incoming_threshold": {
            "type": "integer",
            "format": "int64"
          },
          "outgoing_threshold": {
            "type": "integer",
            "format": "int64"
          },
          "channel_pubkey": {
            "$ref": "#/components/schemas/PubKey"
          },
          "short_channel_id": {
            "$ref": "#/components/schemas/ShortChannelId"
          }
        }
      }
    },
    "securitySchemes": {
      "Cookie": {
        "type": "apiKey",
        "name": "Cookie",
        "in": "cookie"
      }
    }
  }
}