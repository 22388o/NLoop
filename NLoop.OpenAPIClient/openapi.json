{
  "openapi": "3.0.2",
  "info": {
    "title": "NLoop Server OpenAPI definition",
    "description": "Lightning Channel Manager. It will maintain the channel balance by performing submarine swap against Boltz server.\n",
    "contact": {
      "name": "Joe Miyamoto",
      "url": "https://twitter.com/joemphilips",
      "email": "joemphilips@gmail.com"
    },
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://api.server.test/v1"
    }
  ],
  "paths": {
    "/v1/version": {
      "get": {
        "tags": [
          "general"
        ],
        "operationId": "version",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/info": {
      "get": {
        "tags": [
          "general"
        ],
        "operationId": "info",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/swaps/{id}": {
      "get": {
        "tags": [
          "swap"
        ],
        "description": "Get the list of ongoing swaps.\n",
        "operationId": "swaps",
        "parameters": [
          {
            "$ref": "#/components/schemas/swapId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSwapResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/swaps/history": {
      "get": {
        "tags": [
          "swap"
        ],
        "description": "Get the full history of swas. This might take long if you have a lots of entries in a database.\n",
        "operationId": "history",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSwapHistoryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/swaps/ongoing": {
      "get": {
        "tags": [
          "swap"
        ],
        "description": "Get the list of ongoing swaps.\n",
        "operationId": "ongoing",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOngoingSwapResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/loop/out": {
      "post": {
        "tags": [
          "loop"
        ],
        "operationId": "out",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoopOutRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoopOutResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "error message",
                      "minItems": 1,
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Cookie": []
          }
        ]
      }
    },
    "/v1/loop/in": {
      "post": {
        "tags": [
          "loop"
        ],
        "operationId": "in",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoopInRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoopInResponse"
                }
              }
            }
          },
          "400": {
            "description": "invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "error message",
                      "minItems": 1,
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/auto/suggest/{base}/{quote}": {
      "get": {
        "tags": [
          "loop",
          "autoloop"
        ],
        "description": "Get suggestion for the swaps.\n",
        "operationId": "suggest",
        "parameters": [
          {
            "name": "base",
            "in": "path",
            "required": true,
            "description": "base currency",
            "schema": {
              "$ref": "#/components/schemas/cryptoCode"
            }
          },
          {
            "name": "quote",
            "in": "path",
            "required": true,
            "description": "quote currency",
            "schema": {
              "$ref": "#/components/schemas/cryptoCode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestSwapsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/liquidity/params/{offchainAsset}": {
      "get": {
        "tags": [
          "autoloop"
        ],
        "description": "Get the parameters that the daemon's liquidity manager is currently configured with. This may be nil if nothing is configured.\n",
        "operationId": "params",
        "parameters": [
          {
            "name": "offchainAsset",
            "in": "path",
            "required": true,
            "description": "off-chain asset which autoloop manager will take care. default is BTC.",
            "schema": {
              "$ref": "#/components/schemas/cryptoCode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiquidityParameters"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Overwrites the current set of parameters for the daemon's liquidity manager.\n",
        "operationId": "params2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetLiquidityParametersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "error message",
                      "minItems": 1,
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "cryptoCode": {
        "type": "string",
        "description": "Symbol name for the currency.",
        "enum": [
          "BTC",
          "LTC"
        ]
      },
      "pairId": {
        "type": "string",
        "description": "Pair of cryptoCode",
        "example": [
          "BTC/LTC",
          "BTC/BTC"
        ]
      },
      "PubKey": {
        "type": "string",
        "description": "Bitcoin public key in 33 bytes length",
        "maxLength": 33,
        "minLength": 33,
        "example": "03afbba930dc74d6412b71c31f72bfb8d4615121174dd4290cbbf83960961ba9ab"
      },
      "P2PKH": {
        "type": "string",
        "pattern": "^[1][a-km-zA-HJ-NP-Z1-9]{25,34}$",
        "example": "1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2"
      },
      "BitcoinAddressNonMalleable": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/P2WSH"
          },
          {
            "$ref": "#/components/schemas/P2WPKH"
          }
        ]
      },
      "P2SH": {
        "type": "string",
        "pattern": "^[3][a-km-zA-HJ-NP-Z1-9]{25,34}$",
        "example": "3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy"
      },
      "P2WPKH": {
        "type": "string",
        "pattern": "^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25}$",
        "example": "bc1qcw9l54jre2wc4uju222wz8su6am2fs3vufsc8c"
      },
      "P2WSH": {
        "type": "string",
        "pattern": "^(bc1|[13])[a-zA-HJ-NP-Z0-9]{39}$",
        "example": "bc1q2y7lfmmm7xhv2dpf0n0mx6w26zspmvszm3hvkc4yn785xp8dvs5shejlc5"
      },
      "ShortChannelId": {
        "type": "string",
        "description": "See bolt 07",
        "pattern": "(\\d{3})x(\\d{3})x(\\d{2})",
        "example": "140x10x1"
      },
      "swapId": {
        "type": "string"
      },
      "HopHint": {
        "type": "object",
        "properties": {
          "node_id": {
            "description": "The pubkey key of the node at the start of the channel",
            "$ref": "#/components/schemas/PubKey"
          },
          "chan_id": {
            "$ref": "#/components/schemas/ShortChannelId"
          },
          "fee_base_msat": {
            "type": "integer",
            "format": "int64"
          },
          "fee_proportional_millionths": {
            "type": "integer",
            "format": "int64"
          },
          "cltv_expiry_delta": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "LoopOutRequest": {
        "type": "object",
        "required": [
          "amount"
        ],
        "properties": {
          "channel_id": {
            "type": "array",
            "description": "< ShortChannelId for the one you want to get inbound liquidity. default is the one it has least.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ShortChannelId"
            }
          },
          "pair_id": {
            "description": "< currency pair to perform the swap. Default is BTC/BTC.",
            "nullable": true,
            "$ref": "#/components/schemas/pairId"
          },
          "address": {
            "nullable": true,
            "$ref": "#/components/schemas/BitcoinAddressNonMalleable"
          },
          "amount": {
            "type": "integer",
            "description": "< amount in satoshi.",
            "format": "int64"
          },
          "swap_tx_conf_requirement": {
            "type": "integer",
            "description": "< The number of confirmation of the swaptx (htlc tx) before we make an off-chain offer. a.k.a. `htlc_confirmations` on lightning loop. Default number depends on the asset type.",
            "nullable": true
          },
          "label": {
            "type": "string",
            "description": "< Additional label for this request.",
            "nullable": true
          },
          "max_swap_routing_fee": {
            "type": "integer",
            "description": "< Maximum off-chain fee in sat that may be paied for swap payment to the server. This limit is applied during path finding.",
            "format": "int64",
            "nullable": true
          },
          "max_prepay_routing_fee": {
            "type": "integer",
            "description": "< Maximum off-chain fee in sat that may be paid for the prepay to the server. This limit is applied during path finding.",
            "format": "int64",
            "nullable": true
          },
          "max_swap_fee": {
            "type": "integer",
            "description": "< Maximum we are willing to pay the server for the swap. This value is not disclosed in the swap initiation call, but if the server asks for a higher fee, we abort the swap. For multi-asset swap, the unit of this value is off-chain currency. We use a rate information from external exchanges to calculate the value.",
            "format": "int64",
            "nullable": true
          },
          "max_prepay_amount": {
            "type": "integer",
            "description": "< Maximum amount of the (loop-out) swap fee that may be charged as a prepayment",
            "format": "int64",
            "nullable": true
          },
          "max_miner_fee": {
            "type": "integer",
            "description": "< Maximum on-chain fees that we are willing to spend. If we want to sweep the on-chain htlc and the fee estimate turns out higher than this value, we cancel the swap. If the fee estimate is lower, we publish the sweep tx. If the sweep tx is not confirmed, we are forced to ratchet up fees until it is swept. Possibly even exceeding max_miner_fee if we get close to the HTLC timeout. Because the initial publication revealed the preimage, we have no other choice. The server may already have pulled the off-chain HTLC. Only when the fee becomes higher than the swap amount, we can wait for fees to come down and hope -- if we are past the timeout -- that the server is not publishing the revocation.",
            "format": "int64",
            "nullable": true
          },
          "sweep_conf_target": {
            "type": "integer",
            "description": "< Confimation target for sweeping the HTLC (a.k.a. swaptx, lockuptx)",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "LoopInRequest": {
        "type": "object",
        "required": [
          "amount"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "description": "< amount in satoshi.",
            "format": "int64"
          },
          "last_hop": {
            "description": "< node_id (pubkey) to perform the swap against. If you specify both last_hop and channel_id, channel_id is be prioritized.",
            "nullable": true,
            "$ref": "#/components/schemas/PubKey"
          },
          "channel_id": {
            "description": "< channel_id (pubkey) to perform the swap for. If you specify both last_hop and channel_id, channel_id is be prioritized.",
            "nullable": true,
            "$ref": "#/components/schemas/ShortChannelId"
          },
          "pair_id": {
            "description": "< currency pair to perform the swap. Default is BTC/BTC.",
            "nullable": true,
            "$ref": "#/components/schemas/pairId"
          },
          "label": {
            "type": "string",
            "description": "< Additional label for this request.",
            "nullable": true
          },
          "max_miner_fee": {
            "type": "integer",
            "description": "< Maximum on-chain fees that we are willing to spend. If we want to publish the on-chain htlc and the fee estimate turns out higher than this value, we cancel the swap.",
            "format": "int64",
            "nullable": true
          },
          "max_swap_fee": {
            "type": "integer",
            "description": "< Maximum we are willing to pay the server for the swap. This value is not disclosed in the swap initiation call, but if the server asks for a higher fee, we abort the swap. For multi-asset swap, the unit of this value is off-chain currency. We use a rate information from external exchanges to calculate the value.",
            "format": "int64",
            "nullable": true
          },
          "htlc_conf_target": {
            "type": "integer",
            "description": "< Confimation target for sweeping the HTLC (a.k.a. swaptx, lockuptx)",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "GetInfoResponse": {
        "type": "object",
        "required": [
          "version",
          "supported_coins"
        ],
        "properties": {
          "version": {
            "type": "string"
          },
          "supported_coins": {
            "type": "object",
            "properties": {
              "on_chain": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/cryptoCode"
                }
              },
              "off_chain": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/cryptoCode"
                }
              }
            }
          }
        }
      },
      "GetSwapResponse": {
        "type": "object"
      },
      "ShortSwapSummary": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "SuccessfullyFinished",
              "FinishedByError",
              "FinishedByRefund",
              "OnGoing"
            ]
          },
          "error_msg": {
            "type": "string",
            "nullable": true
          },
          "refund_txid": {
            "type": "string",
            "nullable": true
          },
          "cost": {
            "$ref": "#/components/schemas/Cost"
          }
        }
      },
      "GetSwapHistoryResponse": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/ShortSwapSummary"
        }
      },
      "Cost": {
        "type": "object",
        "properties": {
          "server_onchain": {
            "type": "integer",
            "format": "int64"
          },
          "server_offchain": {
            "type": "integer",
            "format": "int64"
          },
          "onchain": {
            "type": "integer",
            "format": "int64"
          },
          "offchain": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GetOngoingSwapResponse": {
        "type": "array",
        "description": "list of swap",
        "items": {
          "type": "object"
        }
      },
      "LoopOutResponse": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Swap identifier to track status.\n"
          },
          "address": {
            "description": "< An address to which counterparty has paid. Must be the same with the one in the request unless null.",
            "$ref": "#/components/schemas/BitcoinAddressNonMalleable"
          },
          "claim_tx_id": {
            "description": "< An txid by which they have paid to us. It is populated only when its 0-conf.",
            "nullable": true
          }
        }
      },
      "LoopInResponse": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Swap identifier to track status.\n"
          },
          "address": {
            "description": "The address of the on-chain HTLC\n",
            "$ref": "#/components/schemas/P2WSH"
          }
        }
      },
      "LiquidityRuleType": {
        "enum": [
          "UNKNOWN",
          "THRESHOLD"
        ]
      },
      "LiquidityRule": {
        "type": "object",
        "properties": {
          "incoming_threshold_percent": {
            "type": "integer",
            "description": "if the incoming liquidity (i.e. other party's share of the channel cap) has become less than this, we will dispatch the loop-out swap\n",
            "format": "int16"
          },
          "outgoing_threshold_percent": {
            "type": "integer",
            "description": "if the outgoing liquidity (i. our share in the channel cap) has become less than this, we will dispatch the loop-in swap\n",
            "format": "int16"
          },
          "pubkey": {
            "$ref": "#/components/schemas/PubKey"
          },
          "channel_id": {
            "$ref": "#/components/schemas/ShortChannelId"
          },
          "type": {
            "$ref": "#/components/schemas/LiquidityRuleType"
          }
        }
      },
      "LiquidityParameters": {
        "type": "object",
        "required": [
          "rules",
          "sweep_conf_target",
          "failure_backoff_sec",
          "autoloop",
          "auto_max_in_flight"
        ],
        "properties": {
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LiquidityRule"
            }
          },
          "fee_ppm": {
            "type": "integer",
            "description": "The parts per million of swap amount that is allowed to be allocated to swap fees. This valie is applied across swap categories and may not be set in conjunction with sweep fee rate, swap fee ppm, routing fee ppm, prepay routing, max prepay and max miner fee.\n",
            "nullable": true
          },
          "sweep_fee_rate_sat_per_kvbyte": {
            "type": "integer",
            "description": "The limit we place on our estimated sweep cost for a swap in sat/kilo-vByte. If the estimated fee for our sweep tx within the specified confirmation target is above this value, we will not suggest any swaps.\n",
            "nullable": true
          },
          "max_swap_fee_ppm": {
            "type": "integer",
            "description": "The maximum fee paid to the server for facilitating the swap, expressed as parts-per-million of the swap amount.\n",
            "nullable": true
          },
          "max_routing_fee_ppm": {
            "type": "integer",
            "nullable": true
          },
          "max_prepay_routing_fee_ppm": {
            "type": "integer",
            "nullable": true
          },
          "max_prepay_sat": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "max_miner_fee_sat": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "sweep_conf_target": {
            "type": "integer",
            "description": "The number of blocks from the on-chain HTLC7s confirmation height that it shuold be swept within."
          },
          "failure_backoff_sec": {
            "type": "integer",
            "description": "The amount of time we require to pass since a channel was part of a failed swap due to off chain payment failure until it will be considered for swap suggestions again, expressed in seconds.\n"
          },
          "autoloop": {
            "type": "boolean",
            "description": "Set to true to enable automatic dispatch of swaps. All swaps will be limited to the fee categories set by these parameters,\n"
          },
          "auto_max_in_flight": {
            "type": "integer",
            "description": "The maximum number of of automatically dispatched swaps that we allow to be in flight at any point in time."
          },
          "min_swap_amount_loopout": {
            "type": "integer",
            "description": "The minimum off-chain amount for loop out, expressed in satoshis, that the autoloop client will dispatch a swap for.\n",
            "format": "int64",
            "nullable": true
          },
          "max_swap_amount_loopout": {
            "type": "integer",
            "description": "The maximum off-chain amount for loop out, expressed in satoshis.",
            "format": "int64",
            "nullable": true
          },
          "min_swap_amount_loopin": {
            "type": "integer",
            "description": "The minimum off-chain amount for loop in, expressed in satoshis, that the autoloop client will dispatch a swap for.\n",
            "format": "int64",
            "nullable": true
          },
          "max_swap_amount_loopin": {
            "type": "integer",
            "description": "The maximum off-chain amount for loop in, expressed in satoshis.",
            "format": "int64",
            "nullable": true
          },
          "onchain_asset": {
            "description": "on-chain asset for the swap. default is BTC.",
            "nullable": true,
            "$ref": "#/components/schemas/cryptoCode"
          },
          "htlc_conf_target": {
            "type": "integer",
            "description": "The conf target we use to estimate the fee for swaptx in loop-in.",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "SetLiquidityParametersRequest": {
        "type": "object",
        "properties": {
          "parameters": {
            "$ref": "#/components/schemas/LiquidityParameters"
          }
        }
      },
      "Disqualified": {
        "type": "object",
        "properties": {
          "channel_id": {
            "nullable": true,
            "$ref": "#/components/schemas/ShortChannelId"
          },
          "pubkey": {
            "nullable": true,
            "$ref": "#/components/schemas/PubKey"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "SuggestSwapsResponse": {
        "type": "object",
        "properties": {
          "loop_out": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoopOutRequest"
            }
          },
          "loop_in": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoopInRequest"
            }
          },
          "disqualified": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Disqualified"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "Cookie": {
        "type": "apiKey",
        "name": "Cookie",
        "in": "cookie"
      }
    }
  }
}